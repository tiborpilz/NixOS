{ inputs, config, options, pkgs, lib, ... }:

with lib;
let cfg = config.modules.shell.zsh;
    mylib = import ../../../lib { inherit inputs lib pkgs; };
    configDir = ../../config;
in {
  options.modules.shell.zsh = with types; {
    enable = mylib.mkBoolOpt false;

    aliases = mylib.mkOpt (attrsOf (either str path)) {};

    rcInit = mylib.mkOpt' lines "" ''
      Zsh lines to be written to /home/tibor/.config/zsh/extra.zshrc and sourced by /home/tibor/.config/zsh/.zshrc
    '';
    envInit = mylib.mkOpt' lines "" ''
      Zsh lines to be written to /home/tibor/.config/zsh/extra.zshenv and sourced by /home/tibor/.config/zsh/.zshenv
    '';

    rcFiles = mylib.mkOpt' (listOf (either str path)) [] ''
      Zsh files to be sourced by /home/tibor/.config/zsh/.zshrc
    '';
    envFiles = mylib.mkOpt' (listOf (either str path)) [] ''
      Zsh files to be sourced by /home/tibor/.config/zsh/.zshenv
    '';
  };

  config = mkIf cfg.enable {
    # TODO    home.xdg.configFile."zsh/.zshrc".text = #
    programs.zsh = {
      enable = true;
      enableCompletion = true;
    };

    # targets.genericLinux.enable = true;

    home.packages = with pkgs; [
      zsh
      zsh-completions
      zsh-syntax-highlighting
      nix-zsh-completions
      bat
      exa
      fasd
      fd
      fzf
      jq
      ripgrep
      tldr
    ];

    home.sessionVariables.ZDOTDIR = "/home/tibor/.config/zsh";
    home.sessionVariables.ZSH_CACHE_DIR = "$XDG_CACHE_HOME/zsh";

    xdg.configFile."zsh" = { source = "${configDir}/zsh"; recursive = true; };

    xdg.configFile."zsh/extra.zshrc".text =
        let aliasLines = mapAttrsToList (n: v: "alias ${n}=\"${v}\"") cfg.aliases;
        in ''
           # This file was autogenerated, do not edit it!
           ${concatStringsSep "\n" aliasLines}
            ${concatMapStrings (path: "source '${path}'\n") cfg.rcFiles}
            ${cfg.rcInit}
         '';

    # xdg.configFile."zsh/extra.zshenv".text = ''
    #     # This file is autogenerated, do not edit it!
    #     ${concatMapStrings (path: "source '${path}'\n") cfg.envFiles}
    #     ${cfg.envInit}
    #   '';

  };
}
